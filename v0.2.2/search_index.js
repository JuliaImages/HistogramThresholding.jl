var documenterSearchIndex = {"docs": [

{
    "location": "#",
    "page": "HistogramThresholding.jl Documentation",
    "title": "HistogramThresholding.jl Documentation",
    "category": "page",
    "text": ""
},

{
    "location": "#HistogramThresholding.find_threshold-Tuple{Otsu,AbstractArray,AbstractRange}",
    "page": "HistogramThresholding.jl Documentation",
    "title": "HistogramThresholding.find_threshold",
    "category": "method",
    "text": "t = find_threshold(Otsu(), histogram, edges)\n\nUnder the assumption that the histogram is bimodal the threshold is set so that the resultant between-class variance is maximal.\n\nOutput\n\nReturns a real number t in edges. The edges parameter represents an AbstractRange which specifies the intervals associated with the histogram bins.\n\nDetails\n\nLet f_i (i=1 ldots I) denote the number of observations in the ith bin of the histogram. Then the probability that an observation belongs to the ith bin is given by  p_i = fracf_iN (i = 1 ldots I), where N = sum_i=1^If_i.\n\nThe choice of a threshold T partitions the data into two categories, C_0 and C_1. Let\n\nP_0(T) = sum_i = 1^T p_i quad textand quad P_1(T) = sum_i = T+1^I p_i\n\ndenote the cumulative probabilities,\n\nmu_0(T) = sum_i = 1^T i fracp_iP_0(T) quad textand quad mu_1(T) = sum_i = T+1^I i fracp_iP_1(T)\n\ndenote the means, and\n\nsigma_0^2(T) = sum_i = 1^T (i-mu_0(T))^2 fracp_iP_0(T) quad textand quad sigma_1^2(T) = sum_i = T+1^I (i-mu_1(T))^2 fracp_iP_1(T)\n\ndenote the variances of categories C_0 and C_1, respectively. Furthermore, let\n\nmu = P_0(T)mu_0(T) + P_1(T)mu_1(T)\n\nrepresent the overall mean,\n\nsigma_b^2(T) = P_0(T)(mu_0(T) - mu)^2 + P_1(T)(mu_1(T) - mu)^2\n\nthe between-category variance, and\n\nsigma_w^2(T) = P_0(T) sigma_0^2(T) +  P_1(T)sigma_1^2(T)\n\nthe within-category variance, respectively.\n\nFinding the discrete value T which maximises the function sigma_b^2(T) produces the sought-after threshold value (i.e. the bin which determines the threshold). As it turns out, that threshold value is equal to the threshold decided by minimizing the within-category variances criterion sigma_w^2(T). Furthermore, that threshold is also the same as the threshold calculated by maximizing the ratio of between-category variance to within-category variance.\n\nArguments\n\nThe function arguments are described in more detail below.\n\nhistogram\n\nAn AbstractArray storing the frequency distribution.\n\nedges\n\nAn AbstractRange specifying how the intervals for the frequency distribution are divided.\n\nExample\n\nCompute the threshold for the \"cameraman\" image in the TestImages package.\n\nusing TestImages, ImageContrastAdjustment, HistogramThresholding\n\nimg = testimage(\"cameraman\")\nedges, counts = build_histogram(img,256)\n#=\n  The `counts` array stores at index 0 the frequencies that were below the\n  first bin edge. Since we are seeking a threshold over the interval\n  partitioned by `edges` we need to discard the first bin in `counts`\n  so that the dimensions of `edges` and `counts` match.\n=#\nt = find_threshold(Otsu(), counts[1:end], edges)\n\nReference\n\nNobuyuki Otsu (1979). “A threshold selection method from gray-level histograms”. IEEE Trans. Sys., Man., Cyber. 9 (1): 62–66. doi:10.1109/TSMC.1979.4310076\n\n\n\n\n\n"
},

{
    "location": "#HistogramThresholding.find_threshold-Tuple{MinimumIntermodes,AbstractArray,AbstractRange}",
    "page": "HistogramThresholding.jl Documentation",
    "title": "HistogramThresholding.find_threshold",
    "category": "method",
    "text": "t = find_threshold(MinimumIntermodes(), histogram, edges; maxiter = 8000)\n\nUnder the assumption that the histogram is bimodal the histogram is smoothed using a length-3 mean filter until two modes remain. The threshold is then set to the minimum value between the two modes.\n\nOutput\n\nReturns a real number t in edges. The edges parameter represents an AbstractRange which specifies the intervals associated with the histogram bins.\n\nDetails\n\nIf after maxiter iterations the smoothed histogram is still not bimodal then the algorithm will fall back to using the UnimodalRosin method to select a threshold.\n\nArguments\n\nThe function arguments are described in more detail below.\n\nhistogram\n\nAn AbstractArray storing the frequency distribution.\n\nedges\n\nAn AbstractRange specifying how the intervals for the frequency distribution are divided.\n\nmaxiter\n\nAn Int that specifies the maximum number of smoothing iterations. If left unspecified a default value of 8000 is used.\n\nExample\n\nCompute the threshold for the \"cameraman\" image in the TestImages package.\n\nusing TestImages, ImageContrastAdjustment, HistogramThresholding\n\nimg = testimage(\"cameraman\")\nedges, counts = build_histogram(img,256)\n#=\n  The `counts` array stores at index 0 the frequencies that were below the\n  first bin edge. Since we are seeking a threshold over the interval\n  partitioned by `edges` we need to discard the first bin in `counts`\n  so that the dimensions of `edges` and `counts` match.\n=#\nt = find_threshold(MinimumIntermodes(), counts[1:end], edges)\n\nReference\n\nC. A. Glasbey, “An Analysis of Histogram-Based Thresholding Algorithms,” CVGIP: Graphical Models and Image Processing, vol. 55, no. 6, pp. 532–537, Nov. 1993. doi:10.1006/cgip.1993.1040\nJ. M. S. Prewitt and M. L. Mendelsohn, “THE ANALYSIS OF CELL IMAGES,” *Annals of the New York Academy of Sciences, vol. 128, no. 3, pp. 1035–1053, Dec. 2006. doi:10.1111/j.1749-6632.1965.tb11715.x\n\n\n\n\n\n"
},

{
    "location": "#HistogramThresholding.find_threshold-Tuple{Intermodes,AbstractArray,AbstractRange}",
    "page": "HistogramThresholding.jl Documentation",
    "title": "HistogramThresholding.find_threshold",
    "category": "method",
    "text": "t = find_threshold(Intermodes(), histogram, edges; maxiter = 8000)\n\nUnder the assumption that the histogram is bimodal the histogram is smoothed using a length-3 mean filter until two modes remain. The threshold is then set to the average value of the two modes.\n\nOutput\n\nReturns a real number t in edges. The edges parameter represents an AbstractRange which specifies the intervals associated with the histogram bins.\n\nDetails\n\nIf after maxiter iterations the smoothed histogram is still not bimodal then the algorithm will fall back to using the UnimodalRosin method to select a threshold.\n\nArguments\n\nThe function arguments are described in more detail below.\n\nhistogram\n\nAn AbstractArray storing the frequency distribution.\n\nedges\n\nAn AbstractRange specifying how the intervals for the frequency distribution are divided.\n\nmaxiter\n\nAn Int that specifies the maximum number of smoothing iterations. If left unspecified a default value of 8000 is used.\n\nExample\n\nCompute the threshold for the \"cameraman\" image in the TestImages package.\n\n\nusing TestImages, ImageContrastAdjustment, HistogramThresholding\n\nimg = testimage(\"cameraman\")\nedges, counts = build_histogram(img,256)\n#=\n  The `counts` array stores at index 0 the frequencies that were below the\n  first bin edge. Since we are seeking a threshold over the interval\n  partitioned by `edges` we need to discard the first bin in `counts`\n  so that the dimensions of `edges` and `counts` match.\n=#\nt = find_threshold(Intermodes(), counts[1:end], edges)\n\nReference\n\nC. A. Glasbey, “An Analysis of Histogram-Based Thresholding Algorithms,” CVGIP: Graphical Models and Image Processing, vol. 55, no. 6, pp. 532–537, Nov. 1993. doi:10.1006/cgip.1993.1040\n\n\n\n\n\n"
},

{
    "location": "#HistogramThresholding.find_threshold-Tuple{MinimumError,AbstractArray,AbstractRange}",
    "page": "HistogramThresholding.jl Documentation",
    "title": "HistogramThresholding.find_threshold",
    "category": "method",
    "text": "t = find_threshold(MinimumError(), histogram, edges)\n\nUnder the assumption that the histogram is a mixture of two Gaussian distributions the threshold is chosen such that the expected misclassification error rate is minimised.\n\nOutput\n\nReturns a real number t in edges. The edges parameter represents an AbstractRange which specifies the intervals associated with the histogram bins.\n\nDetails\n\nLet f_i (i=1 ldots I) denote the number of observations in the ith bin of the histogram. Then the probability that an observation belongs to the ith bin is given by  p_i = fracf_iN (i = 1 ldots I), where N = sum_i=1^If_i.\n\nThe minimum error thresholding method assumes that one can find a threshold T which partitions the data into two categories,  C_0 and C_1, such that the data can be modelled by a mixture of two Gaussian distribution. Let\n\nP_0(T) = sum_i = 1^T p_i quad textand quad P_1(T) = sum_i = T+1^I p_i\n\ndenote the cumulative probabilities,\n\nmu_0(T) = sum_i = 1^T i fracp_iP_0(T) quad textand quad mu_1(T) = sum_i = T+1^I i fracp_iP_1(T)\n\ndenote the means, and\n\nsigma_0^2(T) = sum_i = 1^T (i-mu_0(T))^2 fracp_iP_0(T) quad textand quad sigma_1^2(T) = sum_i = T+1^I (i-mu_1(T))^2 fracp_iP_1(T)\n\ndenote the variances of categories C_0 and C_1, respectively.\n\nKittler and Illingworth proposed to use the minimum error criterion function\n\nJ(T) = 1 + 2 left P_0(T) ln sigma_0(T) + P_1(T) ln sigma_1(T) right - 2 leftP_0(T) ln P_0(T) + P_1(T) ln P_1(T) right\n\nto assess the discreprancy between the mixture of Gaussians implied by a particular threshold T, and the piecewise-constant probability density function represented by the histogram. The discrete value T which minimizes the function J(T) produces the sought-after threshold value (i.e. the bin which determines the threshold).\n\nArguments\n\nThe function arguments are described in more detail below.\n\nhistogram\n\nAn AbstractArray storing the frequency distribution.\n\nedges\n\nAn AbstractRange specifying how the intervals for the frequency distribution are divided.\n\nExample\n\nCompute the threshold for the \"cameraman\" image in the TestImages package.\n\nusing TestImages, ImageContrastAdjustment, HistogramThresholding\n\nimg = testimage(\"cameraman\")\nedges, counts = build_histogram(img,256)\n#=\n  The `counts` array stores at index 0 the frequencies that were below the\n  first bin edge. Since we are seeking a threshold over the interval\n  partitioned by `edges` we need to discard the first bin in `counts`\n  so that the dimensions of `edges` and `counts` match.\n=#\nt = find_threshold(MinimumError(), counts[1:end], edges)\n\nReferences\n\nJ. Kittler and J. Illingworth, “Minimum error thresholding,” Pattern Recognition, vol. 19, no. 1, pp. 41–47, Jan. 1986. doi:10.1016/0031-3203(86)90030-0\nQ.-Z. Ye and P.-E. Danielsson, “On minimum error thresholding and its implementations,” Pattern Recognition Letters, vol. 7, no. 4, pp. 201–206, Apr. 1988. doi:10.1016/0167-8655(88)90103-1\n\n\n\n\n\n"
},

{
    "location": "#HistogramThresholding.find_threshold-Tuple{Moments,AbstractArray,AbstractRange}",
    "page": "HistogramThresholding.jl Documentation",
    "title": "HistogramThresholding.find_threshold",
    "category": "method",
    "text": "t = find_threshold(Moments(), histogram, edges)\n\nThe following rule determines the threshold:  if one assigns all observations below the threshold to a value z₀ and all observations above the threshold to a value z₁, then the first three moments of the original histogram must match the moments of this specially constructed bilevel histogram.\n\nOutput\n\nReturns a real number t in edges. The edges parameter represents an AbstractRange which specifies the intervals associated with the histogram bins.\n\nDetails\n\nLet f_i (i=1 ldots I) denote the number of observations in the ith bin of the histogram and z_i (i=1 ldots I) the observed value associated with the ith bin.  Then the probability that an observation z_i belongs to the ith bin is given by  p_i = fracf_iN (i = 1 ldots I), where N = sum_i=1^If_i.\n\nMoments can be computed from the histogram f in the following way:\n\nm_k = frac1N sum_i p_i (z_i)^k quad k = 0123 ldots\n\nThe principle of moment-preserving thresholding is to select a threshold value, as well as two representative values z_0 and z_1 (z_0  z_1), such that if all below-threshold values in f are replaced by z_0 and all above-threshold values are replaced by z_1, then this specially constructed bilevel histogram g will have the same first three moments as f.\n\nConcretely, let q_0 and q_1 denote the fractions of observations below and above the threshold in f, respectively. The constraint that the first three moments in g must equal the first three moments in f can be expressed by the following system of four equations\n\nbeginaligned\n   q_0 (z_0)^0 + q_1 (z_1)^0    = m_0 \n   q_0 (z_0)^1 + q_1 (z_1)^1    = m_1 \n   q_0 (z_0)^2 + q_1 (z_1)^2    = m_2 \n   q_0 (z_0)^3 + q_1 (z_1)^3    = m_3 \nendaligned\n\nwhere the left-hand side represents the moments of g and the right-hand side represents the moments of f. To find the desired treshold value, one first solves the four equations to obtain q_0 and q_1, and then chooses the threshold t such that q_0 = sum_z_i le t p_i.\n\nArguments\n\nThe function arguments are described in more detail below.\n\nhistogram\n\nAn AbstractArray storing the frequency distribution.\n\nedges\n\nAn AbstractRange specifying how the intervals for the frequency distribution are divided.\n\nExample\n\nCompute the threshold for the \"cameraman\" image in the TestImages package.\n\nusing TestImages, ImageContrastAdjustment, HistogramThresholding\n\nimg = testimage(\"cameraman\")\nedges, counts = build_histogram(img,256)\n#=\n  The `counts` array stores at index 0 the frequencies that were below the\n  first bin edge. Since we are seeking a threshold over the interval\n  partitioned by `edges` we need to discard the first bin in `counts`\n  so that the dimensions of `edges` and `counts` match.\n=#\nt = find_threshold(Moments(), counts[1:end], edges)\n\nReference\n\n[1] W.-H. Tsai, “Moment-preserving thresolding: A new approach,” Computer Vision, Graphics, and Image Processing, vol. 29, no. 3, pp. 377–393, Mar. 1985. doi:10.1016/0734-189x(85)90133-1\n\n\n\n\n\n"
},

{
    "location": "#HistogramThresholding.find_threshold-Tuple{UnimodalRosin,AbstractArray,AbstractRange}",
    "page": "HistogramThresholding.jl Documentation",
    "title": "HistogramThresholding.find_threshold",
    "category": "method",
    "text": "t = find_threshold(UnimodalRosin(), histogram, edges)\n\nGenerates a threshold assuming a unimodal distribution using Rosin\'s algorithm.\n\nOutput\n\nReturns a real number t in edges. The edges parameter represents an AbstractRange which specifies the intervals associated with the histogram bins.\n\nDetails\n\nThis algorithm first selects the bin in the histogram with the highest frequency. The algorithm then searches from the location of the maximum bin to the last bin of the histogram for the first bin with a frequency of 0 (known as the minimum bin.). A line is then drawn that passes through both the maximum and minimum bins. The bin with the greatest orthogonal distance to the line is chosen as the threshold value.\n\nAssumptions\n\nThis algorithm assumes that:\n\nThe histogram is unimodal.\nThere is always at least one bin that has a frequency of 0. If not, the algorithm will use the last bin as the minimum bin.\n\nIf the histogram includes multiple bins with a frequency of 0, the algorithm will select the first zero bin as its minimum. If there are multiple bins with the greatest orthogonal distance, the leftmost bin is selected as the threshold.\n\nArguments\n\nThe function arguments are described in more detail below.\n\nhistogram\n\nAn AbstractArray storing the frequency distribution.\n\nedges\n\nAn AbstractRange specifying how the intervals for the frequency distribution are divided.\n\nExample\n\nCompute the threshold for the \"moonsurface\" image in the TestImages package.\n\nusing TestImages, ImageContrastAdjustment, HistogramThresholding\n\nimg = testimage(\"moonsurface\")\nedges, counts = build_histogram(img,256)\n#=\n  The `counts` array stores at index 0 the frequencies that were below the\n  first bin edge. Since we are seeking a threshold over the interval\n  partitioned by `edges` we need to discard the first bin in `counts`\n  so that the dimensions of `edges` and `counts` match.\n=#\nt = find_threshold(UnimodalRosin(), counts[1:end], edges)\n\nReference\n\nP. L. Rosin, “Unimodal thresholding,” Pattern Recognition, vol. 34, no. 11, pp. 2083–2096, Nov. 2001.doi:10.1016/s0031-3203(00)00136-9\n\n\n\n\n\n"
},

{
    "location": "#HistogramThresholding.find_threshold-Tuple{Entropy,AbstractArray,AbstractRange}",
    "page": "HistogramThresholding.jl Documentation",
    "title": "HistogramThresholding.find_threshold",
    "category": "method",
    "text": "find_threshold(Entropy(),counts,edges)\n\nAn algorithm for finding the threshold value for a gray-level histogram using the entropy of the histogram.\n\nOutput\n\nReturns the point in the AbstractRange which corresponds to the threshold bin in the histogram.\n\nDetails\n\nThis algorithm uses the entropy of a gray level histogram to produce a threshold value.\n\nLet f_1 f_2 ldots f_I be the frequencies in the various bins of the histogram and I the number of bins. With N = sum_i=1^If_i, let p_i = fracf_iN (i = 1 ldots I) denote the probability distribution of gray levels. From this distribution one derives two additional distributions. The first defined for discrete values 1 to s and the other, from s+1 to I. These distributions are\n\nA fracp_1P_s fracp_2P_s ldots fracp_sP_s\nquad textand quad\nB fracp_s+11-P_s ldots fracp_n1-P_s\nquad textwhere quad\nP_s = sum_i=1^sp_i\n\nThe entropies associated with each distribution are as follows:\n\nH(A) = ln(P_s) + fracH_sP_s\n\nH(B) = ln(1-P_s) + fracH_n-H_s1-P_s\n\nquad textwhere quad\nH_s = -sum_i=1^sp_ilnp_i\nquad textand quad\nH_n = -sum_i=1^Ip_ilnp_i\n\nCombining these two entropy functions we have\n\npsi(s) = ln(P_s(1-P_s)) + fracH_sP_s + fracH_n-H_s1-P_s\n\nFinding the discrete value s which maximises the function psi(s) produces the sought-after threshold value (i.e. the bin which determines the threshold).\n\nSee Section 4 of [1] for more details on the derivation of the entropy.\n\nOptions\n\nChoices for counts\n\nYou can specify an AbstractArray which should be a 1D array of frequencies for a histogram. You should submit the corresponding edges range for the bins of the histogram. The function will throw an error if it detects that the edges and counts have different lengths.\n\nChoices for edges\n\nYou can specify an AbstractRange which should be the corresponding range for the bins of the histogram array passed into counts.\n\nExample\n\n\nusing TestImages, Images\n\nimg = testimage(\"cameraman\")\n# building a histogram with 256 bins\nedges, counts = build_histogram(img, 256)\n#=\n  The `counts` array stores at index 0 the frequencies that were below the\n  first bin edge. Since we are seeking a threshold over the interval\n  partitioned by `edges` we need to discard the first bin in `counts`\n  so that the dimensions of `edges` and `counts` match.\n=#\nfind_threshold(EntropyThresholding(), counts[1:end], edges)\n\nReferences\n\n[1] J. N. Kapur, P. K. Sahoo, and A. K. C. Wong, “A new method for gray-level picture thresholding using the entropy of the histogram,” Computer Vision, Graphics, and Image Processing, vol. 29, no. 1, p. 140, Jan. 1985.doi:10.1016/s0734-189x(85)90156-2\n\n\n\n\n\n"
},

{
    "location": "#HistogramThresholding.find_threshold-Tuple{Balanced,AbstractArray,AbstractRange}",
    "page": "HistogramThresholding.jl Documentation",
    "title": "HistogramThresholding.find_threshold",
    "category": "method",
    "text": "t = find_threshold(Balanced(), histogram, edges)\n\nIn balanced histogram thresholding, one interprets a  bin as a  physical weight with a mass equal to its occupancy count. The balanced histogram method involves iterating the following three steps: (1) choose the midpoint bin index as a \"pivot\",  (2) compute the combined weight to the left and right of the pivot bin and (3) remove the leftmost bin if the left side is the heaviest, and the rightmost bin otherwise. The algorithm stops when only a single bin remains. The last bin determines the sought-after threshold.\n\nOutput\n\nReturns a real number t in edges. The edges parameter represents an AbstractRange which specifies the intervals associated with the histogram bins.\n\nDetails\n\nLet f_n (n = 1 ldots N) denote the number of observations in the nth bin of the histogram. The balanced histogram method constructs a sequence of nested intervals\n\n1N cap mathbbZ supset I_2 supset I_3 supset ldots supset I_N-1\n\nwhere for k = 2 ldots N-1\n\nI_k = begincases\n   I_k-1 setminus min left( I_k-1 right)  textif  sum_n = min left( I_k-1 right)^I_mf_n gt   sum_n =  I_m + 1^ max left( I_k-1 right) f_n \r\n   I_k-1 setminus max left( I_k-1 right)  textotherwise\nendcases\n\nand I_m = lfloor frac12left(  min left( I_k-1 right) +  max left( I_k-1 right) right) rfloor. The final interval I_N-1 consists of a single element which is the bin index corresponding to the desired threshold.\n\nIf one interprets a bin as a physical weight with a mass equal to its occupancy count, then each step of the algorithm can be conceptualised as removing the leftmost or rightmost bin to \"balance\" the resulting histogram on a pivot. The pivot is defined to be the midpoint between the start and end points of the interval under consideration.\n\nIf it turns out that the single element in I_N-1 equals 1 or N then the original histogram must have a single peak and the algorithm has failed to find a suitable threshold. In this case the algorithm will fall back to using the UnimodalRosin method to select the threshold.\n\nArguments\n\nThe function arguments are described in more detail below.\n\nhistogram\n\nAn AbstractArray storing the frequency distribution.\n\nedges\n\nAn AbstractRange specifying how the intervals for the frequency distribution are divided.\n\nExample\n\nCompute the threshold for the \"cameraman\" image in the TestImages package.\n\n\nusing TestImages, ImageContrastAdjustment, HistogramThresholding\n\nimg = testimage(\"cameraman\")\nedges, counts = build_histogram(img, 256)\n#=\n  The `counts` array stores at index 0 the frequencies that were below the\n  first bin edge. Since we are seeking a threshold over the interval\n  partitioned by `edges` we need to discard the first bin in `counts`\n  so that the dimensions of `edges` and `counts` match.\n=#\nt = find_threshold(Balanced(), counts[1:end], edges)\n\nReference\n\n“BI-LEVEL IMAGE THRESHOLDING - A Fast Method”, Proceedings of the First International Conference on Bio-inspired Systems and Signal Processing, 2008. Available: 10.5220/0001064300700076\n\n\n\n\n\n"
},

{
    "location": "#HistogramThresholding.find_threshold-Tuple{Yen,AbstractArray,AbstractRange}",
    "page": "HistogramThresholding.jl Documentation",
    "title": "HistogramThresholding.find_threshold",
    "category": "method",
    "text": "t = find_threshold(Yen(), histogram, edges)\n\nComputes the threshold value using Yen\'s maximum correlation criterion for bilevel thresholding.\n\nOutput\n\nReturns a real number t in edges. The edges parameter represents an AbstractRange which specifies the intervals associated with the histogram bins.\n\nDetails\n\nThis algorithm uses the concept of entropic correlation of a gray level histogram to produce a threshold value.\n\nLet f_1 f_2 ldots f_I be the frequencies in the various bins of the histogram and I the number of bins. With N = sum_i=1^If_i, let p_i = fracf_iN (i = 1 ldots I) denote the probability distribution of gray levels. From this distribution one derives two additional distributions. The first defined for discrete values 1 to s and the other, from s+1 to I. These distributions are\n\nA fracp_1P_s fracp_2P_s ldots fracp_sP_s\nquad textand quad\nB fracp_s+11-P_s ldots fracp_n1-P_s\nquad textwhere quad\nP_s = sum_i=1^sp_i\n\nThe entropic correlations associated with each distribution are\n\nC(A) = -ln sum_i=1^s left( fracp_iP_s right)^2 quad textand quad C(B) = -ln sum_i=s+1^I left( fracp_i1 - P_s right)^2\n\nCombining these two entropic correlation functions we have\n\npsi(s) = -ln sum_i=1^s left( fracp_iP_s right)^2 -ln sum_i=s+1^I left( fracp_i1 - P_s right)^2\n\nFinding the discrete value s which maximises the function psi(s) produces the sought-after threshold value (i.e. the bin which determines the threshold).\n\nArguments\n\nThe function arguments are described in more detail below.\n\nhistogram\n\nAn AbstractArray storing the frequency distribution.\n\nedges\n\nAn AbstractRange specifying how the intervals for the frequency distribution are divided.\n\nExample\n\nCompute the threshold for the \"cameraman\" image in the TestImages package.\n\n\nusing TestImages, ImageContrastAdjustment, HistogramThresholding\n\nimg = testimage(\"cameraman\")\nedges, counts = build_histogram(img, 256)\n#=\n  The `counts` array stores at index 0 the frequencies that were below the\n  first bin edge. Since we are seeking a threshold over the interval\n  partitioned by `edges` we need to discard the first bin in `counts`\n  so that the dimensions of `edges` and `counts` match.\n=#\nt = find_threshold(Yen(), counts[1:end], edges)\n\nReference\n\nYen JC, Chang FJ, Chang S (1995), “A New Criterion for Automatic Multilevel Thresholding”, IEEE Trans. on Image Processing 4 (3): 370-378, doi:10.1109/83.366472\n\n\n\n\n\n"
},

{
    "location": "#HistogramThresholding.jl-Documentation-1",
    "page": "HistogramThresholding.jl Documentation",
    "title": "HistogramThresholding.jl Documentation",
    "category": "section",
    "text": "find_threshold(::Otsu,  ::AbstractArray, ::AbstractRange)\nfind_threshold(::MinimumIntermodes,  ::AbstractArray, ::AbstractRange)\nfind_threshold(::Intermodes,  ::AbstractArray, ::AbstractRange)\nfind_threshold(::MinimumError,  ::AbstractArray, ::AbstractRange)\nfind_threshold(::Moments,  ::AbstractArray, ::AbstractRange)\nfind_threshold(::UnimodalRosin,  ::AbstractArray, ::AbstractRange)\nfind_threshold(::Entropy,  ::AbstractArray, ::AbstractRange)\nfind_threshold(::Balanced,  ::AbstractArray, ::AbstractRange)\nfind_threshold(::Yen,  ::AbstractArray, ::AbstractRange)"
},

]}
